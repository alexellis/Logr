var express = require('express');
var app = express();
var server = require('http').createServer(app);
var dataaccess = require('./dataaccess').dataaccess;

server.listen(3000);

var end = function () {
    dataaccess.end();
    process.exit(1);

};

process.on('SIGINT', end);

dataaccess.bootup("events.db");

app.use(express.static(__dirname + '/public'));

function logdb(dataaccess) {
    this.data_access = dataaccess;
}

logdb.prototype.top = function (count, back) {
    return this.data_access.top(count, back);
};

logdb.prototype.today = function (item) {
    this.data_access.today(item);
};

logdb.prototype.log = function (item) {
    this.data_access.push(item);
};

logdb.prototype.get = function (back) {
    return this.data_access.get(back);
};

var logdb1 = new logdb(dataaccess);

function Item(id, name, date, ip) {
    this.id = id;
    this.name = name;
    this.date = date;
    this.ip = ip;
}

function toDateTime(secs) {
    var t = new Date();
    t.setTime(secs);
    return t;
}

function groupById(list) {
    var group={}
    for(var i=0;i<list.length;i++){
        if(!group[list[i].id.trim()]){
            group[list[i].id.trim()]=0;
        }
        group[list[i].id.trim()]= group[list[i].id.trim()]+1;
    }
    return group;
}

function renderGroup(grouped) {
    var content="";
    for (var grp in grouped) {
        if(grp && grouped.hasOwnProperty(grp)){
            content += grp + " "+grouped[grp]+"<br>";
        }
    }
    return content;
}

function simpleRenderEvents(req, res, list) {
    var content = "";
    if (list.length > 0) {
        for (var i = 0; i < list.length; i++) {
            content = content + "<li>" + toDateTime(list[i].date).toUTCString() + " " + list[i].id + " " + list[i].name + "  [" + list[i].ip + "]</li>";
        }
    } else {
        content = "<li>No items logged.</li>"
    }

    var grouped = groupById(list);
    var groupedContent=renderGroup(grouped);

    res.write(
        "<html>\n"+
        "<head>\n"+
        "   <title>Logged items</title>\n"+
        "   <link rel=\"stylesheet\" type=\"text/css\" href=\"/index.css\">\n"+
        "</head>\n"+
        "<body>\n"+
        "   <h3>Listing events logged</h3>\n" +
        groupedContent+"\n"+
        "   <ul>" + content + "</ul>\n" +
        "   <hr>\n"+
        "   Generated by <a href=\"http://github.com/alexellis/Logr\">Logr.</a>\n"+
        "</body>\n"+
        "</html>");
    res.end();
};

app.get('/today/', function (req, res) {
    res.writeHead(200, {
        'Content-Type': 'text/html'
    });
    var numberInput = req.params.number;
    var limitNumber = parseInt(numberInput);

    logdb1.today(function(values) {
        simpleRenderEvents(req,res,values);
    });
});

app.get('/top/:number/', function (req, res) {
    res.writeHead(200, {
        'Content-Type': 'text/html'
    });
    var numberInput = req.params.number;
    var limitNumber = parseInt(numberInput);
    logdb1.top(limitNumber, function(values) {
        simpleRenderEvents(req,res,values);
    });
});

app.get('/list/', function (req, res) {
    res.writeHead(200, {
        'Content-Type': 'text/html'
    });
    logdb1.get(function(values) {
        simpleRenderEvents(req,res,values);
    });
});

app.get('/log/:id/:name', function (req, res) {
    res.writeHead(200, {
        'Content-Type': 'text/json'
    });
    var ip = req.headers['x-forwarded-for'] ||
        req.connection.remoteAddress ||
        req.socket.remoteAddress ||
        req.connection.socket.remoteAddress;
    var dateNow = new Date();
    var item = new Item(req.params.id, req.params.name, dateNow, ip);
    logdb1.log(item);

    console.log("Item logged from ip " + ip);

    res.write(JSON.stringify({
        status: 'logged',
        ip: ip,
        now: dateNow.getTime()
    }));
    res.end();
});